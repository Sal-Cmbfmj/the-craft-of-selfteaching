### 12月01日

#### 问题：
* 阅读到布尔运算章节时发现，fork下来的.ipynb文档，和网页的Markdown、文件夹中的Markdown相比，缺失部分章节，盲猜是个别用户修改并且不小心合并到主分支造成-------从头开始，同时看Markdown和.ipynb文档，对照补全并提交。

#### 摘要
* 使用 `git init` 命令将一个本地文件夹 `working directory` 初始化为 `local repository` 




### 12月02日

#### 记录
* jupyter lab增加cell快捷键：A（above），B（below）
* jupyter lab运行代码：Shift+Enter（执行完跳到下一个cell），Control+Enter（执行完停留在本cell）

#### 摘要
* 一个完整的程序，由一个或者多个**语句**（Statements）构成。通常情况下，建议每一行只写一条语句
* 关于**函数**，相关的概念有：*函数名*（Function Name）、*参数*（Parameters）、*返回值*（Return Value）、*调用*（Call）
* 在 Python 语言中，**行首空白**（Leading whitespace，由空格 `' '` 或者 Tab `⇥` 构成）有着特殊的含义，Python 将认为这一行与其他邻近有着相同行首空白的语句同属于一个**语句块** —— 而一个语句块必然由一个行末带有冒号 `:` 的语句起始
* `+`、`-`、`*`、`/`、`//`、`%`、`**` —— 它们分别代表加、减、乘、除、商、余、幂

#### 其他
* 定义---不同角度的定义/拆分方式---不同的解法---穷尽所有的可能性
* 优化---节省算力---省电



### 12月03日

#### 摘要
* 在 Python 中每个函数都有返回值，即便你在定义一个函数的时候没有设定返回值，它也会加上默认的返回值 None……（请注意 None 的大小写！）
* 运算的一个默认法则就是，通常情况下应该是相同类型的值才能相互运算
* 数值计算的操作符优先级最高，其次是逻辑操作符，布尔值的操作符优先级最低
* 针对布尔值，优先级最低的是或 or，然后是与 and, 优先级最高的是非 not
* 字符对应着 Unicode 码，字符在被比较的时候，被比较的是对应的 Unicode 码，当字符串被比较的时候，将从两个字符串各自的第一个字符开始逐个比较，“一旦决出胜负马上停止
* 有序容器操作：
    * 拼接：+ 和 ' '（后者是空格）
    * 拷贝：*
    * 逻辑运算：in、not in；以及，<、<=、>、>=、!=、==
* True：
    By default, an object is considered true unless its class defines either a __bool__() method that returns False or a __len__() method that returns zero, when called with the object.
    * 非类
    * 非布尔值False
    * 非长度为空字符串
* False：
    constants defined to be false: None and False.
    zero of any numeric type: 0, 0.0, 0j, Decimal(0), Fraction(0, 1)
    empty sequences and collections: '', (), [], {}, set(), range(0)
* 关于表达式：https://docs.python.org/3/reference/expressions.html
* 关于所有操作的优先级：https://docs.python.org/3/reference/expressions.html#operator-precedence
* 上一条链接不懂 BNF 的话根本读不懂：https://en.wikipedia.org/wiki/Backus-Naur_form
* Python 的内建函数：https://docs.python.org/3/library/functions.html
* Python 的标准数据类型：https://docs.python.org/3/library/stdtypes.html
* 另外，其实所有的操作符，在 Python 内部也是调用函数完成的：https://docs.python.org/3.7/library/operator.html
* continue 语句将忽略其后的语句开始下次循环，而 break 语句将从此结束当前循环，开始执行循环之后的语句

#### 补充
* 元组和列表相关：https://www.liaoxuefeng.com/wiki/1016959663602400/1017092876846880
* 字典和集合相关：https://www.liaoxuefeng.com/wiki/1016959663602400/1017104324028448
* 字典和列表：dict是用空间来换取时间的一种方法，dict的key必须是不可变对象，字典无序
* 通过key计算位置的算法称为哈希算法（Hash），因此要保证hash的正确性，作为key的对象就不能变
* set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key，重复元素在set中自动被过滤
* 要创建一个set，需要提供一个list作为输入集合
* set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集（&）、并集（|）等操作
* 对不可变对象进行操作，要赋值给一个新变量去接收

#### 问题：
* print(f'{r} is even.')，f何解？
    * 要使用 格式化字符串字面值 ，请在字符串的开始引号或三引号之前加上一个 f 或 F 。在此字符串中，你可以在 { 和 } 字符之间写可以引用的变量或字面值的 Python 表达式
    
    
    
    
### 12月07日

#### 补充：
* 斐波那契数列（Fibonacci sequence），又称黄金分割数列、兔子数列：F(0) = 0，F(1) = 1, F(n) = F(n - 1) + F(n - 2)（n ≥ 2，n ∈ N*），如果设an为该数列的第n项（），那么这句话可以写成如下形式：an = a(n-1) + a(n-2)

#### 摘要：
* for 更适合处理序列类型的数据（Sequence Type）的迭代，比如处理字符串中的每一个字符，比如把 range() 返回的数列当作某种序列类型的索引
* while 更为灵活，因为它后面只需要接上一个逻辑表达式即可

### 12月08日

#### 补充：
* print(f'')，里面含有表达式
* Jupyter lab 快捷操作键：https://www.jianshu.com/p/f21595816abf

#### 摘要：
* 如果你是设计开关的人就不一样了，你必须知道其中的运作原理；但是，最终，你还是希望你的用户用最简单方便的操作界面，而不是必须搞懂所有原理才能够使用你所设计的产品
* `print('Hello', 'world!', sep=' ', end='\n', file=sys.stdout, flush=False)`
    * 如果flush = True，立即返回结果
    * https://fishc.com.cn/thread-68419-1-1.html